Collections Framework:
It is a collection of interfaces and classes which help us store, manipulate data in an easy way.
It has many built-in method to manipulate the data.

Why we should use collections Framework?
Variables can store only one value at a time, but if we want to store multiple values then we use Collections Framework.
for Example: if we want to store the name of students we will need lots of Variables but with Collections Framework we use the class for the particular variable.
to overcome this problem we can use Arrays. They allow us to store multiple values using a single variable. Data in arrays in stored based on indexes. but they don't have
to manipulate the data. They are fixed in size and once we declared the array size then we can change it.

Benefits of Arrays:
1-They can store both primitive and non-primitive data types like integer and doubles etc.
2-They occupy less space as compared to ArrayLists.
3-They are fast.
4-ArrayLists are also built using arrays.

To overcome these shortcomings Java guys developed the Collections Framework, it has many interfaces and classes which can make storing, accessing and manipulating data easily.

The biggest disadvantage of ArrayLists is that they don't accept primitive data type we have to use Wrapper Classes with them. which occupy 4 times more memory in certain cases
======================================================
Wrapper classes:
They are object equivalent of primitive data types
for each primitive data type we have a wrapper object type.

we can use boxing and unboxing to convert the data between primitive and wrapper data types.
to make this conversion easy Java guys made it automatic.
int number=10;====> Integer wrapperNumber=number;//Autoboxing//recommended
wrapperNumber=new Integer(number);//boxing not recommended
number=wrapperNumber// AutoUnboxing//recommended
number=(int)wrapperNumber;//unboxing
number=wrapperNumber.intValue();//unboxing
number=Integer.valueOf(wrapperNumber);//unboxing
======================================================================================
List Interface:
    1-Maintain the insertion Order
    2-Allows duplicates
ArrayLists:
    1-ArrayLists are better if 90% of our operations involve reading the data
    and 10% of the operation involves writing the data to the list.
    2- ArrayLists are also better if most of the time we insert the data at the end of the list.

LinkedList:
    1- better if we have to store the data in the start or middle of the list, we don't need to perform shifting.
    2- slow when it comes to retrieval.
